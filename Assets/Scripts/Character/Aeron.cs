using System;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// An enum to represent Aeron's moral and leadership stance.
/// </summary>
public enum NobleStance
{
    Unyielding, // Focused on defense and protection
    Commanding  // Focused on offense and leading the charge
}

/// <summary>
/// Represents Aeron, a noble warrior of Aethelgard and one of the Ɲōvəmîŋāđ.
/// His relationship with his brother, Kane, is a central conflict in his story.
/// </summary>
public class Aeron : Novamina
{
    // --- Core Character & Narrative Properties ---

    /// <summary>
    /// A reference to Aeron's brother and rival, Kane.
    /// In a real game, this would link to Kane's character object.
    /// </summary>
    public Guid RivalBrotherId { get; set; }

    /// <summary>
    /// Represents Aeron's current combat stance, which can be changed
    /// during battle to adapt to different situations.
    /// </summary>
    public NobleStance Stance { get; private set; }

    // --- Resource and Combat Properties ---

    /// <summary>
    /// A resource that represents Aeron's willpower and determination.
    /// It is generated by dealing and receiving damage and spent on powerful abilities.
    /// </summary>
    public float Resolve { get; private set; }

    /// <summary>
    /// The maximum amount of Resolve Aeron can have.
    /// </summary>
    public float MaxResolve { get; private set; } = 100f;


    // --- Initialization ---

    protected override void Awake()
    {
        base.Awake();
        characterName = "Aeron";
        Archetype = "Tank / Melee DPS";
        maxHealth = 180; // Durable, but less so than a pure tank like Micah.
        currentHealth = maxHealth;
        Stance = NobleStance.Unyielding; // Starts in a defensive stance by default.
        Resolve = 0f;
    }


    // --- Core Mechanic (Stance Switching) ---

    /// <summary>
    /// Switches Aeron's combat stance, potentially changing the effect of his other abilities.
    /// </summary>
    public void SwitchStance()
    {
        if (Stance == NobleStance.Unyielding)
        {
            Stance = NobleStance.Commanding;
            Debug.Log($"{characterName} switches to a Commanding stance, ready to lead the attack!");
        }
        else
        {
            Stance = NobleStance.Unyielding;
            Debug.Log($"{characterName} switches to an Unyielding stance, focusing on defense!");
        }
    }


    // --- Abilities (Methods) ---

    /// <summary>
    /// A basic melee attack that builds Resolve.
    /// </summary>
    /// <param name="target">The enemy to strike.</param>
    public void ValiantStrike(Character target)
    {
        // ... damage calculation logic ...
        float resolveGained = 10f;
        Resolve = Mathf.Min(MaxResolve, Resolve + resolveGained);
        Debug.Log($"{characterName} strikes {target.characterName} with valor! (+{resolveGained} Resolve)");
    }

    /// <summary>
    /// A powerful ability whose effect changes based on Aeron's current stance.
    /// Spends Resolve.
    /// </summary>
    /// <param name="allies">A list of all allied characters for potential buffs.</param>
    public void LionsRoar(List<Character> allies)
    {
        if (Resolve >= 50)
        {
            Resolve -= 50;
            Debug.Log($"{characterName} lets out a mighty roar!");

            switch (Stance)
            {
                case NobleStance.Unyielding:
                    // In the defensive stance, the roar grants a defensive buff to all allies.
                    Debug.Log("...His roar inspires resilience, granting a defensive shield to his allies!");
                    // In-game logic to apply a temporary shield or defense buff to each ally.
                    break;
                case NobleStance.Commanding:
                    // In the offensive stance, the roar grants an offensive buff to all allies.
                    Debug.Log("...His roar ignites courage, boosting the attack power of his allies!");
                    // In-game logic to apply a temporary damage buff to each ally.
                    break;
            }
        }
    }

    /// <summary>
    /// An ultimate ability representing a diving attack, leveraging his winged nature.
    /// Spends a large amount of Resolve.
    /// </summary>
    /// <param name="target">The primary enemy to attack.</param>
    public void SkyfallCharge(Character target)
    {
        if (Resolve >= 90)
        {
            Resolve -= 90;
            Debug.Log($"{characterName} soars into the sky and dives down upon {target.characterName} in a devastating charge!");
            // ... logic for high single-target damage ...
        }
    }
}